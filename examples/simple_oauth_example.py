#!/usr/bin/env python3
"""–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è cTrader Open API Async."""

import asyncio
import logging
from typing import Optional

from ctrader_open_api_async import AsyncClient, AsyncAuth, EndPoints
from ctrader_open_api_async.messages.OpenApiMessages_pb2 import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def get_access_token_manual(client_id: str, client_secret: str, redirect_uri: str) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    
    Args:
        client_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        client_secret: –°–µ–∫—Ä–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        redirect_uri: URI –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        
    Returns:
        Access token –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    async with AsyncAuth(client_id, client_secret, redirect_uri) as auth:
        # 1. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url = auth.get_auth_uri(scope="trading")
        
        print(f"\nüîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print(f"{auth_url}")
        print(f"\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print(f"2. –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à cTrader ID –∞–∫–∫–∞—É–Ω—Ç")
        print(f"3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        print(f"4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
        print(f"   (–ø–∞—Ä–∞–º–µ—Ç—Ä 'code' –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)")
        
        # 2. –ñ–¥–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_code = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
        
        if not auth_code:
            print("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return None
        
        try:
            # 3. –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
            token_data = await auth.get_token(auth_code)
            access_token = token_data['access_token']
            
            print(f"‚úÖ Access token –ø–æ–ª—É—á–µ–Ω!")
            print(f"üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print(f"   {access_token}")
            
            return access_token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞."""
    
    # –ù–ê–°–¢–†–û–ô–ö–ò - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
    CLIENT_ID = "your_client_id"
    CLIENT_SECRET = "your_client_secret" 
    REDIRECT_URI = "http://localhost:8080/auth/callback"
    IS_LIVE = False  # True –¥–ª—è live, False –¥–ª—è demo
    
    # –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π access token –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ OAuth
    EXISTING_ACCESS_TOKEN = None  # "your_existing_access_token"
    
    if CLIENT_ID == "your_client_id":
        print("‚ùå –û–®–ò–ë–ö–ê: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ CLIENT_ID –∏ CLIENT_SECRET")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://id.ctrader.com/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ 'Applications'")
        print("3. –î–æ–±–∞–≤—å—Ç–µ redirect URI: http://localhost:8080/auth/callback")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏ Client Secret")
        return
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º access token
        if EXISTING_ACCESS_TOKEN:
            access_token = EXISTING_ACCESS_TOKEN
            print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π access token")
        else:
            print("üîê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            access_token = await get_access_token_manual(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI)
            if not access_token:
                return
        
        # –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
        host = EndPoints.PROTOBUF_LIVE_HOST if IS_LIVE else EndPoints.PROTOBUF_DEMO_HOST
        
        async with AsyncClient(host, EndPoints.PROTOBUF_PORT) as client:
            print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ cTrader Open API...")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await client.send_application_auth_req(CLIENT_ID, CLIENT_SECRET)
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts_response = await client.send_get_account_list_by_access_token_req(access_token)
            accounts = list(accounts_response.ctidTraderAccount)
            
            if not accounts:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return
            
            account_id = accounts[0].ctidTraderAccountId
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID: {account_id}")
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            await client.send_account_auth_req(account_id, access_token)
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ
            trader_response = await client.send_trader_req(account_id)
            trader = trader_response.trader
            
            print(f"\nüìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ:")
            print(f"   –ë–∞–ª–∞–Ω—Å: {trader.balance / (10 ** trader.moneyDigits):.2f}")
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–∞—Ä–∂–∞: {trader.totalMarginUsed / (10 ** trader.moneyDigits):.2f}")
            print(f"   –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L: {trader.totalUnrealizedGrossPnL / (10 ** trader.moneyDigits):.2f}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
            symbols_response = await client.send_symbols_list_req(account_id)
            symbols = list(symbols_response.symbol)
            
            print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø–µ—Ä–≤—ã–µ 5 –∏–∑ {len(symbols)}):")
            for i, symbol in enumerate(symbols[:5]):
                print(f"   {i+1}. {symbol.symbolName} (ID: {symbol.symbolId})")
            
            print(f"\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("cTrader Open API - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OAuth –ø—Ä–∏–º–µ—Ä")
    print("=" * 45)
    asyncio.run(main()) 