#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è cTrader Open API Async."""

import asyncio
import logging
import webbrowser
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread
from urllib.parse import parse_qs, urlparse
from typing import Optional

from ctrader_open_api_async import AsyncClient, AsyncAuth, EndPoints
from ctrader_open_api_async.messages.OpenApiMessages_pb2 import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class OAuthRedirectHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è OAuth —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞."""
    
    authorization_code: Optional[str] = None
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        parsed_url = urlparse(self.path)
        query_params = parse_qs(parsed_url.query)
        
        if 'code' in query_params:
            OAuthRedirectHandler.authorization_code = query_params['code'][0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html_response = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h1>
                <p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.</p>
                <script>
                    setTimeout(() => window.close(), 3000);
                </script>
            </body>
            </html>
            """
            self.wfile.write(html_response.encode('utf-8'))
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {OAuthRedirectHandler.authorization_code}")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            self.send_response(400)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            error = query_params.get('error', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'])[0]
            error_description = query_params.get('error_description', [''])[0]
            
            html_response = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h1>
                <p><strong>–û—à–∏–±–∫–∞:</strong> {error}</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {error_description}</p>
            </body>
            </html>
            """
            self.wfile.write(html_response.encode('utf-8'))
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error} - {error_description}")
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞."""
        pass


class CTraderOAuthExample:
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–π OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è cTrader API."""
    
    def __init__(
        self,
        client_id: str,
        client_secret: str,
        redirect_uri: str = "http://localhost:8080/auth/callback",
        is_live: bool = False,
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        
        Args:
            client_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ cTrader
            client_secret: –°–µ–∫—Ä–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ cTrader
            redirect_uri: URI –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
            is_live: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å live —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é demo)
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.redirect_uri = redirect_uri
        self.is_live = is_live
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç –∏–∑ redirect_uri –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        parsed_uri = urlparse(redirect_uri)
        self.server_port = parsed_uri.port or 8080
        
        self.access_token: Optional[str] = None
        self.refresh_token: Optional[str] = None
        self.account_id: Optional[int] = None
        
        # –í—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ –¥–ª—è API
        host = EndPoints.PROTOBUF_LIVE_HOST if is_live else EndPoints.PROTOBUF_DEMO_HOST
        self.client = AsyncClient(host, EndPoints.PROTOBUF_PORT)
    
    def start_local_server(self) -> HTTPServer:
        """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OAuth —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞."""
        server = HTTPServer(('localhost', self.server_port), OAuthRedirectHandler)
        server_thread = Thread(target=server.serve_forever)
        server_thread.daemon = True
        server_thread.start()
        logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.server_port}")
        return server
    
    async def perform_oauth_flow(self, scope: str = "trading") -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ OAuth –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        
        Args:
            scope: –û–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ ('accounts' –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è, 'trading' –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏)
            
        Returns:
            True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            server = self.start_local_server()
            
            # 2. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OAuth
            async with AsyncAuth(self.client_id, self.client_secret, self.redirect_uri) as auth:
                
                # 3. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                auth_url = auth.get_auth_uri(scope=scope)
                logger.info(f"URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")
                
                # 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                print(f"–ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}\n")
                webbrowser.open(auth_url)
                
                # 5. –ñ–¥–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                timeout = 300  # 5 –º–∏–Ω—É—Ç
                for _ in range(timeout):
                    if OAuthRedirectHandler.authorization_code:
                        break
                    await asyncio.sleep(1)
                else:
                    raise TimeoutError("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                # 6. –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
                auth_code = OAuthRedirectHandler.authorization_code
                token_data = await auth.get_token(auth_code)
                
                self.access_token = token_data['access_token']
                self.refresh_token = token_data.get('refresh_token')
                
                logger.info("‚úÖ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                logger.info(f"Access Token –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(self.access_token)})")
                
            # 7. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            server.shutdown()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def connect_and_authenticate(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ cTrader API
            await self.client.start_service()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ cTrader Open API")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            auth_response = await self.client.send_application_auth_req(
                self.client_id, self.client_secret
            )
            logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
    
    async def get_accounts(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ access token."""
        try:
            response = await self.client.send_get_account_list_by_access_token_req(
                self.access_token
            )
            
            accounts = list(response.ctidTraderAccount)
            if accounts:
                self.account_id = accounts[0].ctidTraderAccountId
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç ID: {self.account_id}")
                
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                await self.client.send_account_auth_req(
                    self.account_id, self.access_token
                )
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–∞")
            
            return accounts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []
    
    async def get_trader_info(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ."""
        if not self.account_id:
            logger.error("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return None
        
        try:
            response = await self.client.send_trader_req(self.account_id)
            trader = response.trader
            
            info = {
                'balance': trader.balance,
                'total_margin_used': trader.totalMarginUsed,
                'total_unrealized_gross_pnl': trader.totalUnrealizedGrossPnL,
                'money_digits': trader.moneyDigits,
                'registration_timestamp': trader.registrationTimestamp,
            }
            
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–π–¥–µ—Ä–µ: {info}")
            return info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ: {e}")
            return None
    
    async def get_symbols(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤."""
        if not self.account_id:
            logger.error("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return []
        
        try:
            response = await self.client.send_symbols_list_req(self.account_id)
            symbols = list(response.symbol)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            for i, symbol in enumerate(symbols[:limit]):
                logger.info(f"–°–∏–º–≤–æ–ª {i+1}: {symbol.symbolName} (ID: {symbol.symbolId})")
            
            return symbols
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            if self.account_id:
                await self.client.send_account_logout_req(self.account_id)
                logger.info("–í—ã—Ö–æ–¥ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            
            await self.client.stop_service()
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç cTrader Open API")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ cTrader
    CLIENT_ID = "your_client_id"
    CLIENT_SECRET = "your_client_secret"
    REDIRECT_URI = "http://localhost:8080/auth/callback"  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    IS_LIVE = False  # True –¥–ª—è live —Å–µ—Ä–≤–µ—Ä–∞, False –¥–ª—è demo
    
    if CLIENT_ID == "your_client_id":
        print("‚ùå –û–®–ò–ë–ö–ê: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ CLIENT_ID –∏ CLIENT_SECRET")
        print("\nüìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ cTrader ID Portal: https://id.ctrader.com/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ 'Applications'")
        print("3. –î–æ–±–∞–≤—å—Ç–µ redirect URI: http://localhost:8080/auth/callback")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏ Client Secret –≤ —ç—Ç–æ—Ç –∫–æ–¥")
        return
    
    example = CTraderOAuthExample(
        CLIENT_ID, 
        CLIENT_SECRET, 
        REDIRECT_URI, 
        IS_LIVE
    )
    
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è cTrader Open API")
        print("=" * 60)
        
        # 1. –í—ã–ø–æ–ª–Ω—è–µ–º OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print("\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        if not await example.perform_oauth_flow(scope="trading"):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            return
        
        # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
        print("\n2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ cTrader API...")
        if not await example.connect_and_authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
            return
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        accounts = await example.get_accounts()
        if not accounts:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–µ—Ä–µ
        print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ...")
        trader_info = await example.get_trader_info()
        
        # 5. –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
        symbols = await example.get_symbols(limit=5)
        
        print("\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        await example.cleanup()


if __name__ == "__main__":
    print("cTrader Open API - –ü—Ä–∏–º–µ—Ä OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    asyncio.run(main()) 