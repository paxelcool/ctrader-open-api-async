#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–ª–∏–∑–∞ cTrader Open API Async."""

import os
import sys
import subprocess
import shutil
from pathlib import Path


def run_command(command: str, check: bool = True) -> subprocess.CompletedProcess:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ shell."""
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if check and result.returncode != 0:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        print(f"Stdout: {result.stdout}")
        print(f"Stderr: {result.stderr}")
        sys.exit(1)
    
    return result


def clean_project():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    dirs_to_remove = [
        "build",
        "dist", 
        "*.egg-info",
        "__pycache__",
        ".pytest_cache",
        ".mypy_cache",
        ".coverage"
    ]
    
    for pattern in dirs_to_remove:
        run_command(f"find . -name '{pattern}' -type d -exec rm -rf {{}} + 2>/dev/null || true", check=False)
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_remove = [
        "*.pyc",
        "*.pyo", 
        "*.pyd",
        ".coverage",
        "coverage.xml"
    ]
    
    for pattern in files_to_remove:
        run_command(f"find . -name '{pattern}' -type f -delete 2>/dev/null || true", check=False)
    
    print("‚úÖ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_tools = ["black", "ruff", "mypy", "pytest", "build", "twine"]
    
    for tool in required_tools:
        result = run_command(f"which {tool}", check=False)
        if result.returncode != 0:
            print(f"‚ùå {tool} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {tool}")
            return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    return True


def format_code():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥."""
    print("üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...")
    
    run_command("black .")
    run_command("ruff check . --fix")
    
    print("‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    result = run_command("pytest --cov=ctrader_open_api_async --cov-report=term-missing", check=False)
    
    if result.returncode != 0:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")
    return True


def type_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø—ã."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤...")
    
    result = run_command("mypy ctrader_open_api_async", check=False)
    
    if result.returncode != 0:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        print(result.stdout)
    else:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ—à–ª–∞")
    
    return True


def build_package():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç."""
    print("üì¶ –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...")
    
    run_command("python -m build")
    
    print("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω")


def check_package():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...")
    
    run_command("twine check dist/*")
    
    print("‚úÖ –ü–∞–∫–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω")


def update_version():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª–∞—Ö."""
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    
    init_file = Path("ctrader_open_api_async/__init__.py")
    if init_file.exists():
        with open(init_file, 'r') as f:
            content = f.read()
            for line in content.split('\n'):
                if '__version__' in line:
                    print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {line}")
                    break
    
    print("‚úÖ –í–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ cTrader Open API Async")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("ctrader_open_api_async").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    clean_project()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    update_version()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
    format_code()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
    type_check()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if not run_tests():
        print("‚ùå –†–µ–ª–∏–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        sys.exit(1)
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç
    build_package()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç
    check_package()
    
    print("\nüéâ –†–µ–ª–∏–∑ –≥–æ—Ç–æ–≤!")
    print("üì¶ –§–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist/")
    print("üöÄ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: twine upload dist/*")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ dist/")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ git tag —Å –≤–µ—Ä—Å–∏–µ–π")
    print("3. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–∞ PyPI")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ GitHub Release")


if __name__ == "__main__":
    main() 