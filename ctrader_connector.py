import json
import logging
import os
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
from urllib.parse import urlencode

from ctrader_open_api import Client, EndPoints, Protobuf, TcpProtocol
from ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *
from ctrader_open_api.messages.OpenApiMessages_pb2 import *
from ctrader_open_api.messages.OpenApiModelMessages_pb2 import *
from google.protobuf.json_format import MessageToJson
from twisted.internet import reactor
from twisted.internet.defer import Deferred
from twisted.web.client import Agent
from twisted.web.http_headers import Headers
from twisted.web.iweb import IBodyProducer
from zope.interface import implementer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@implementer(IBodyProducer)
class StringProducer:
    """–ü—Ä–æ–¥—é—Å–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ HTTP-–∑–∞–ø—Ä–æ—Å–∞—Ö Twisted."""
    def __init__(self, body):
        self.body = body
        self.length = len(body)

    def startProducing(self, consumer):
        consumer.write(self.body)
        from twisted.internet.defer import succeed
        return succeed(None)

    def pauseProducing(self):
        pass

    def stopProducing(self):
        pass

class CTraderConnector:
    """–ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å cTrader Open API."""

    def __init__(self, credentials_path: str, tokens_path: str = "tokens.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞.

        Args:
            credentials_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (clientId, clientSecret, host).
            tokens_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
        """
        self.credentials_path = credentials_path
        self.tokens_path = tokens_path
        self.client_id: Optional[str] = None
        self.client_secret: Optional[str] = None
        self.host_type: Optional[str] = None
        self.current_account_id: Optional[int] = None
        self.token: Optional[Dict[str, Any]] = None
        self.client: Optional[Client] = None
        self.load_credentials()
        self.load_tokens()
        self.setup_client()

    def load_credentials(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(self.credentials_path) as f:
                creds = json.load(f)
                self.client_id = creds["clientId"]
                self.client_secret = creds["Secret"]
                self.host_type = creds["Host"].lower()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def load_tokens(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        if os.path.exists(self.tokens_path):
            try:
                with open(self.tokens_path) as f:
                    self.token = json.load(f)
                    logger.info("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
                self.token = None

    def save_tokens(self, token_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.tokens_path, 'w') as f:
                json.dump(token_data, f)
            logger.info("–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")

    def setup_client(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ cTrader."""
        host = EndPoints.PROTOBUF_LIVE_HOST if self.host_type == "live" else EndPoints.PROTOBUF_DEMO_HOST
        self.client = Client(host, EndPoints.PROTOBUF_PORT, TcpProtocol)
        self.client.setConnectedCallback(self.on_connected)
        self.client.setDisconnectedCallback(self.on_disconnected)
        self.client.setMessageReceivedCallback(self.on_message_received)
        self.client.startService()

    def on_connected(self, client: Client) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        logger.info("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.send_application_auth()

    def on_disconnected(self, client: Client, reason: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

    def on_message_received(self, client: Client, message: Any) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if message.payloadType == ProtoHeartbeatEvent().payloadType:
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if message.payloadType == ProtoOAApplicationAuthRes().payloadType:
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
        if message.payloadType == ProtoOAAccountAuthRes().payloadType:
            response = Protobuf.extract(message)
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {response.ctidTraderAccountId} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ JSON –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
        try:
            extracted_message = Protobuf.extract(message)
            message_json = MessageToJson(extracted_message)
            message_data = json.loads(message_json)

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if message.payloadType == 2126:  # ProtoOAExecutionEvent
                execution_type = message_data.get("executionType", "")
                if execution_type == "ORDER_FILLED":
                    order_info = message_data.get("order", {})
                    is_closing = order_info.get("closingOrder", False)
                    if is_closing:
                        logger.info("üî¥ –ü–û–ó–ò–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ö–†–´–¢–ê!")
                    else:
                        logger.info("üü¢ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê!")
                elif execution_type == "ORDER_ACCEPTED":
                    order_info = message_data.get("order", {})
                    is_closing = order_info.get("closingOrder", False)
                    if is_closing:
                        logger.info("‚è≥ –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ä–¥–µ—Ä –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è...")
                    else:
                        logger.info("‚è≥ –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ä–¥–µ—Ä –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è...")

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message.payloadType}:")
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {message_json}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ JSON: {e}")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message.payloadType} (–±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")

    def send_application_auth(self) -> Deferred:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        request = ProtoOAApplicationAuthReq()
        request.clientId = self.client_id
        request.clientSecret = self.client_secret
        return self.client.send(request)

    def get_auth_uri(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        params = {
            "client_id": self.client_id,
            "redirect_uri": "http://localhost:8080/redirect",
            "response_type": "code",
            "scope": "trading"
        }
        return f"https://openapi.ctrader.com/apps/auth?{urlencode(params)}"

    def get_token(self, auth_code: str) -> Deferred:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        from twisted.web.client import readBody

        agent = Agent(reactor)
        url = b"https://openapi.ctrader.com/apps/token"
        headers = Headers({
            b"Content-Type": [b"application/x-www-form-urlencoded"],
            b"Accept": [b"application/json"]
        })
        request_body = urlencode({
            "grant_type": "authorization_code",
            "code": auth_code,
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "redirect_uri": "http://localhost:8080/redirect"
        }).encode("utf-8")

        body_producer = StringProducer(request_body)

        def handle_response(response):
            return readBody(response)

        def handle_body(body_bytes):
            return self._process_token_response(body_bytes)

        def handle_error(failure):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {failure}")
            return failure

        d = agent.request(b"POST", url, headers, body_producer)
        d.addCallback(handle_response)
        d.addCallback(handle_body)
        d.addErrback(handle_error)
        return d

    def _process_token_response(self, body_bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º."""
        try:
            token_data = json.loads(body_bytes.decode("utf-8"))
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤: {token_data}")

            if "errorCode" in token_data and token_data["errorCode"] is not None:
                error_msg = token_data.get('description', f"–û—à–∏–±–∫–∞ {token_data['errorCode']}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {error_msg}")
                raise ValueError(error_msg)

            if "access_token" not in token_data:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token –≤ –æ—Ç–≤–µ—Ç–µ: {token_data}")
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")

            self.token = token_data
            self.save_tokens(token_data)
            logger.info("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return token_data
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {body_bytes}")
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise

    def refresh_token(self) -> Deferred:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞."""
        if not self.token or "refresh_token" not in self.token:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        from twisted.web.client import readBody

        agent = Agent(reactor)
        url = b"https://openapi.ctrader.com/apps/token"
        headers = Headers({
            b"Content-Type": [b"application/x-www-form-urlencoded"],
            b"Accept": [b"application/json"]
        })
        request_body = urlencode({
            "grant_type": "refresh_token",
            "refresh_token": self.token["refresh_token"],
            "client_id": self.client_id,
            "client_secret": self.client_secret
        }).encode("utf-8")

        body_producer = StringProducer(request_body)

        def handle_response(response):
            return readBody(response)

        def handle_body(body_bytes):
            return self._process_token_response(body_bytes)

        d = agent.request(b"POST", url, headers, body_producer)
        d.addCallback(handle_response)
        d.addCallback(handle_body)
        return d

    def ensure_token_valid(self) -> Deferred:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
        if not self.token:
            raise ValueError("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è expires_in –∏ issued_at
        if "expires_in" not in self.token or "issued_at" not in self.token:
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
            d = Deferred()
            d.callback(None)
            return d

        expires_at = datetime.fromtimestamp(self.token["expires_in"] + self.token["issued_at"])
        if datetime.now() < expires_at - timedelta(minutes=5):
            d = Deferred()
            d.callback(None)
            return d
        return self.refresh_token()

    def set_account(self, account_id: int) -> Deferred:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        self.current_account_id = account_id
        request = ProtoOAAccountAuthReq()
        request.ctidTraderAccountId = account_id
        request.accessToken = self.token["access_token"]
        return self.client.send(request)

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    def send_version_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–∏ API."""
        request = ProtoOAVersionReq()
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_get_account_list_by_access_token_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω—É."""
        request = ProtoOAGetAccountListByAccessTokenReq()
        request.accessToken = self.token["access_token"]
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_account_logout_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        request = ProtoOAAccountLogoutReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_asset_list_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤."""
        request = ProtoOAAssetListReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_asset_class_list_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤."""
        request = ProtoOAAssetClassListReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_symbol_category_list_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–∏–º–≤–æ–ª–æ–≤."""
        request = ProtoOASymbolCategoryListReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_symbols_list_req(self, include_archived: bool = False, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤."""
        request = ProtoOASymbolsListReq()
        request.ctidTraderAccountId = self.current_account_id
        request.includeArchivedSymbols = include_archived
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_trader_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–π–¥–µ—Ä–µ."""
        request = ProtoOATraderReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_subscribe_spots_req(self, symbol_ids: List[int], client_msg_id: Optional[str] = None) -> Deferred:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ—Ç–æ–≤—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏."""
        request = ProtoOASubscribeSpotsReq()
        request.ctidTraderAccountId = self.current_account_id
        request.symbolId.extend(symbol_ids)
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_unsubscribe_spots_req(self, symbol_id: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–ø–æ—Ç–æ–≤—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫."""
        request = ProtoOAUnsubscribeSpotsReq()
        request.ctidTraderAccountId = self.current_account_id
        request.symbolId.append(symbol_id)
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_reconcile_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π."""
        request = ProtoOAReconcileReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_get_trendbars_req(self, weeks: int, period: str, symbol_id: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –±–∞—Ä–æ–≤."""
        request = ProtoOAGetTrendbarsReq()
        request.ctidTraderAccountId = self.current_account_id
        request.period = ProtoOATrendbarPeriod.Value(period)
        request.fromTimestamp = int((datetime.utcnow() - timedelta(weeks=weeks)).timestamp() * 1000)
        request.toTimestamp = int(datetime.utcnow().timestamp() * 1000)
        request.symbolId = symbol_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_get_tick_data_req(self, days: int, quote_type: str, symbol_id: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        request = ProtoOAGetTickDataReq()
        request.ctidTraderAccountId = self.current_account_id
        request.type = ProtoOAQuoteType.Value(quote_type.upper())
        request.fromTimestamp = int((datetime.utcnow() - timedelta(days=days)).timestamp() * 1000)
        request.toTimestamp = int(datetime.utcnow().timestamp() * 1000)
        request.symbolId = symbol_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_new_order_req(self, symbol_id: int, order_type: int, trade_side: int, volume: int, price: Optional[float] = None, client_msg_id: Optional[str] = None) -> Deferred:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞."""
        request = ProtoOANewOrderReq()
        request.ctidTraderAccountId = self.current_account_id
        request.symbolId = symbol_id
        request.orderType = order_type
        request.tradeSide = trade_side
        request.volume = volume  # –û–±—ä–µ–º —É–∂–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
        if order_type == 2:  # LIMIT
            request.limitPrice = price
        elif order_type == 3:  # STOP
            request.stopPrice = price
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_close_position_req(self, position_id: int, volume: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏."""
        request = ProtoOAClosePositionReq()
        request.ctidTraderAccountId = self.current_account_id
        request.positionId = position_id
        request.volume = volume  # –û–±—ä–µ–º —É–∂–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_cancel_order_req(self, order_id: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞."""
        request = ProtoOACancelOrderReq()
        request.ctidTraderAccountId = self.current_account_id
        request.orderId = order_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_deal_offset_list_req(self, deal_id: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–º–µ—â–µ–Ω–∏–π —Å–¥–µ–ª–∫–∏."""
        request = ProtoOADealOffsetListReq()
        request.ctidTraderAccountId = self.current_account_id
        request.dealId = deal_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_get_position_unrealized_pnl_req(self, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞."""
        request = ProtoOAGetPositionUnrealizedPnLReq()
        request.ctidTraderAccountId = self.current_account_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_order_details_req(self, order_id: int, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞."""
        request = ProtoOAOrderDetailsReq()
        request.ctidTraderAccountId = self.current_account_id
        request.orderId = order_id
        return self.client.send(request, clientMsgId=client_msg_id)

    def send_order_list_by_position_id_req(self, position_id: int, from_timestamp: Optional[int] = None, to_timestamp: Optional[int] = None, client_msg_id: Optional[str] = None) -> Deferred:
        """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ ID –ø–æ–∑–∏—Ü–∏–∏."""
        request = ProtoOAOrderListByPositionIdReq()
        request.ctidTraderAccountId = self.current_account_id
        request.positionId = position_id
        return self.client.send(request, fromTimestamp=from_timestamp, toTimestamp=to_timestamp, clientMsgId=client_msg_id)
