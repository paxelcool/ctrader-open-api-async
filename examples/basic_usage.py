#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cTrader Open API Async.

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!

–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- oauth_auth_example.py - –ø–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä
- simple_oauth_example.py - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://help.ctrader.com/open-api/account-authentication/
"""

import asyncio
import logging
from typing import Optional

from ctrader_open_api_async import AsyncClient, EndPoints
from ctrader_open_api_async.messages.OpenApiCommonMessages_pb2 import *
from ctrader_open_api_async.messages.OpenApiMessages_pb2 import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class CTraderExample:
    """
    –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cTrader API.
    
    ‚ö†Ô∏è –£–°–¢–ê–†–ï–í–®–ò–ô - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!
    """

    def __init__(
        self,
        client_id: str,
        client_secret: str,
        access_token: str,
        is_live: bool = False,
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞.

        Args:
            client_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            client_secret: –°–µ–∫—Ä–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OAuth!)
            is_live: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å live —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é demo)
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = access_token

        # –í—ã–±–æ—Ä —Ö–æ—Å—Ç–∞
        host = EndPoints.PROTOBUF_LIVE_HOST if is_live else EndPoints.PROTOBUF_DEMO_HOST
        self.client = AsyncClient(host, EndPoints.PROTOBUF_PORT)

        self.account_id: Optional[int] = None

    async def connect_and_auth(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.client.start_service()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ cTrader Open API")

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            auth_response = await self.client.send_application_auth_req(
                self.client_id, self.client_secret
            )
            logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    async def get_accounts(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.

        Returns:
            –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        try:
            response = await self.client.send_get_account_list_by_access_token_req(
                self.access_token
            )
            accounts = list(response.ctidTraderAccount)

            if accounts:
                self.account_id = accounts[0].ctidTraderAccountId
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç ID: {self.account_id}")

                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                await self.client.send_account_auth_req(
                    self.account_id, self.access_token
                )
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–∞")

            return accounts

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []

    async def get_symbols(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤.

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        """
        if not self.account_id:
            logger.error("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return []

        try:
            response = await self.client.send_symbols_list_req(self.account_id)
            symbols = list(response.symbol)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
            for i, symbol in enumerate(symbols[:5]):
                logger.info(
                    f"–°–∏–º–≤–æ–ª {i+1}: {symbol.symbolName} (ID: {symbol.symbolId})"
                )

            return symbols

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []

    async def subscribe_to_spots(self, symbol_ids: list) -> None:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ—Ç —Ü–µ–Ω—ã.

        Args:
            symbol_ids: –°–ø–∏—Å–æ–∫ ID —Å–∏–º–≤–æ–ª–æ–≤
        """
        if not self.account_id:
            logger.error("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        try:
            await self.client.send_subscribe_spots_req(self.account_id, symbol_ids)
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ—Ç —Ü–µ–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbol_ids}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ—Ç —Ü–µ–Ω—ã: {e}")

    async def listen_for_spots(self, duration: int = 30) -> None:
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–ø–æ—Ç —Ü–µ–Ω.

        Args:
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info(f"–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–ø–æ—Ç —Ü–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        def on_message(client, message):
            if hasattr(message, 'payloadType') and hasattr(message, 'payload'):
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message.payloadType}")

        self.client.set_message_received_callback(on_message)

        # –û–∂–∏–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.sleep(duration)

    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç API."""
        try:
            if self.account_id:
                await self.client.send_account_logout_req(self.account_id)
                logger.info("–í—ã—Ö–æ–¥ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")

            await self.client.stop_service()
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç cTrader Open API")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞."""
    
    print("=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–°–¢–ê–†–ï–í–®–ò–ô –ü–†–ò–ú–ï–†!")
    print("=" * 80)
    print("–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ù–ï —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!")
    print("–°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ cTrader API, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OAuth 2.0 –ø–æ—Ç–æ–∫.")
    print("")
    print("üìã –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   ‚Ä¢ oauth_auth_example.py - –ø–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä")
    print("   ‚Ä¢ simple_oauth_example.py - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä")
    print("")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://help.ctrader.com/open-api/account-authentication/")
    print("=" * 80)
    
    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_input = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞? (y/N): ").strip().lower()
    if user_input not in ['y', 'yes', '–¥–∞']:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ oauth_auth_example.py –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return

    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    CLIENT_ID = "your_client_id"
    CLIENT_SECRET = "your_client_secret"
    ACCESS_TOKEN = "your_access_token"  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OAuth!
    IS_LIVE = False  # True –¥–ª—è live —Å–µ—Ä–≤–µ—Ä–∞, False –¥–ª—è demo

    if CLIENT_ID == "your_client_id":
        logger.error(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ CLIENT_ID, CLIENT_SECRET –∏ ACCESS_TOKEN"
        )
        logger.error("ACCESS_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!")
        return

    example = CTraderExample(CLIENT_ID, CLIENT_SECRET, ACCESS_TOKEN, IS_LIVE)

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not await example.connect_and_auth():
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = await example.get_accounts()
        if not accounts:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        symbols = await example.get_symbols()
        if not symbols:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤")
            return

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
        symbol_ids = [symbol.symbolId for symbol in symbols[:3]]
        await example.subscribe_to_spots(symbol_ids)

        # –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–ø–æ—Ç —Ü–µ–Ω
        await example.listen_for_spots(30)

    except KeyboardInterrupt:
        logger.info("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await example.disconnect()


if __name__ == "__main__":
    asyncio.run(main())
