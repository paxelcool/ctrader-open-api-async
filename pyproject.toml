[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ctrader-open-api-async"
version = "2.0.0"
description = "Async/await версия cTrader Open API библиотеки"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Pavel Sadovenko", email = "paxelcool@gmail.com"}
]
maintainers = [
    {name = "Pavel Sadovenko", email = "paxelcool@gmail.com"}
]
keywords = ["ctrader", "trading", "api", "async", "asyncio", "forex", "cfd"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
    "Framework :: AsyncIO",
]
requires-python = ">=3.8"
dependencies = [
    "aiohttp",
    "websockets",
    "protobuf",
    "cryptography",
    "pyOpenSSL",
    "service-identity",
    "requests",
    "urllib3",
    "orjson",
    "typing-extensions",
]

[project.optional-dependencies]
dev = [
    "black",
    "mypy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "ruff",
]
docs = [
    "mkdocs",
    "mkdocs-material",
]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]

[project.urls]
Homepage = "https://github.com/paxelcool/ctrader-open-api-async"
Documentation = "https://github.com/paxelcool/ctrader-open-api-async/blob/main/README.md"
Repository = "https://github.com/paxelcool/ctrader-open-api-async"
"Bug Tracker" = "https://github.com/paxelcool/ctrader-open-api-async/issues"
"Original Project" = "https://github.com/spotware/OpenApiPy"

[tool.setuptools.packages.find]
include = ["ctrader_open_api_async*"]

[tool.setuptools.package-data]
ctrader_open_api_async = ["messages/*.py"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "ctrader_open_api_async/messages/.*_pb2\\.py$",  # Исключаем сгенерированные protobuf файлы
]

[[tool.mypy.overrides]]
module = [
    "ctrader_open_api_async.messages.*",
    "google.protobuf.*",
]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
target-version = "py38"
line-length = 88
exclude = [
    "ctrader_open_api_async/messages/*_pb2.py",  # Исключаем сгенерированные protobuf файлы
    ".venv",
    "build",
    "dist",
    ".git",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F403", # star imports in examples
    "F405", # may be undefined from star imports
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*.py" = ["F403", "F405", "F841"]  # Разрешаем star imports и неиспользуемые переменные в примерах
"test_*.py" = ["F841", "E722"]  # Разрешаем неиспользуемые переменные и bare except в тестах 