"""–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π cTrader Async API."""

import asyncio
import logging
import webbrowser
import json
from typing import Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import parse_qs, urlparse
import threading
from datetime import datetime, timedelta

from ctrader_async_connector import (
    CTraderAsyncConnector, 
    TradeSide, 
    OrderType, 
    TrendbarPeriod,
    QuoteType
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RedirectHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    
    def __init__(self, auth_callback: callable, *args, **kwargs):
        self.auth_callback = auth_callback
        super().__init__(*args, **kwargs)

    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        parsed_path = urlparse(self.path)
        query_params = parse_qs(parsed_path.query)
        auth_code = query_params.get('code', [None])[0]
        if auth_code:
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b"Authorization successful, you can close this page.")
            self.auth_callback(auth_code)
        else:
            self.send_response(400)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b"Error: Invalid or empty authorization code.")

    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞."""
        pass

class FullAsyncTester:
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è cTrader Async API."""
    
    def __init__(self, credentials_path: str):
        self.connector = CTraderAsyncConnector(credentials_path)
        self.account_id: Optional[int] = None
        self.symbol_id: Optional[int] = None
        self.symbol_name: Optional[str] = None
        self.volume = 100
        self.auth_code: Optional[str] = None
        self.server: Optional[HTTPServer] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        self.tests_passed = 0
        self.tests_failed = 0
        self.test_results = []

    def log_test_result(self, test_name: str, success: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞."""
        if success:
            self.tests_passed += 1
            logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù {message}")
        else:
            self.tests_failed += 1
            logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù {message}")
        
        self.test_results.append({
            "test": test_name,
            "success": success,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cTrader Async API")
        
        try:
            async with self.connector:
                # 1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                await self.test_authorization()
                
                # 2. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                await self.test_connection()
                
                # 3. –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
                await self.test_accounts()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                if not self.connector.current_account_id:
                    logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
                    self.print_final_report()
                    return
                
                # 4. –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏...")
                await self.test_symbols()
                
                # 5. –¢–µ—Å—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                await self.test_market_data()
                
                # 6. –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
                await self.test_historical_data()
                
                # 7. –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
                await self.test_trading()
                
                # 8. –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
                await self.test_info_requests()
                
                # 9. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
                await self.test_event_handlers()
                
                # 10. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
                await self.test_cleanup()
                
                # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
                self.print_final_report()
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        finally:
            if self.server:
                self.server.server_close()

    async def test_authorization(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        logger.info("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        try:
            if self.connector.token:
                await self.connector.ensure_token_valid()
                self.log_test_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞", True, "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            else:
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
                auth_uri = self.connector.get_auth_uri()
                self.log_test_result("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URI –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", True, f"URI: {auth_uri[:50]}...")
                
                self.start_redirect_server()
                webbrowser.open(auth_uri)
                
                await self.wait_for_auth()
                await self.connector.get_token(self.auth_code)
                
                if self.server:
                    self.server.server_close()
                    self.server = None
                
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", True, "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
        except Exception as e:
            self.log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", False, str(e))

    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if self.connector.client and self.connector.client.is_connected:
                self.log_test_result("TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", True, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                self.log_test_result("TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", False, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ API
            version_response = await self.connector.send_version_req()
            self.log_test_result("–ó–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–∏ API", True, "–í–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            
        except Exception as e:
            self.log_test_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", False, str(e))

    async def test_accounts(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."""
        logger.info("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts = await self.connector.get_account_list()
            if accounts:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", True, f"–ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                self.account_id = accounts[0].account_id
                await self.connector.set_account(self.account_id)
                self.log_test_result("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞", True, f"–ê–∫–∫–∞—É–Ω—Ç {self.account_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", False, "–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
                return
                
        except Exception as e:
            self.log_test_result("–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", False, str(e))
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return

    async def test_symbols(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏."""
        logger.info("üí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not self.connector.current_account_id:
                self.log_test_result("–†–∞–±–æ—Ç–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏", False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            symbols = None
            for attempt in range(3):
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤...")
                    symbols = await self.connector.get_symbols()
                    
                    # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
                    await asyncio.sleep(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
                    if self.connector.symbols:
                        symbols = list(self.connector.symbols.values())
                        break
                        
                except asyncio.TimeoutError:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    if attempt == 2:
                        raise
                    await asyncio.sleep(5)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt == 2:
                        raise
                    await asyncio.sleep(5)
            
            if symbols and len(symbols) > 0:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤", True, f"–ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
                btc_symbol = self.connector.get_symbol_by_name("BTCUSD")
                if btc_symbol:
                    self.symbol_id = btc_symbol.symbol_id
                    self.symbol_name = btc_symbol.symbol_name
                    self.volume = 1
                    self.log_test_result("–ü–æ–∏—Å–∫ BTCUSD", True, f"–ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª ID={self.symbol_id}")
                else:
                    # –ò—â–µ–º –ª—é–±–æ–π —Å–∏–º–≤–æ–ª —Å USD
                    usd_symbols = [s for s in symbols if "USD" in s.symbol_name]
                    if usd_symbols:
                        first_symbol = usd_symbols[0]
                        self.symbol_id = first_symbol.symbol_id
                        self.symbol_name = first_symbol.symbol_name
                        self.volume = 1000
                        self.log_test_result("–í—ã–±–æ—Ä USD —Å–∏–º–≤–æ–ª–∞", True, f"–í—ã–±—Ä–∞–Ω {self.symbol_name}")
                    else:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∏–º–≤–æ–ª
                        first_symbol = symbols[0]
                        self.symbol_id = first_symbol.symbol_id
                        self.symbol_name = first_symbol.symbol_name
                        self.volume = 1000
                        self.log_test_result("–í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞", True, f"–í—ã–±—Ä–∞–Ω {self.symbol_name}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–æ ID
                try:
                    symbol_by_id = await self.connector.get_symbol_by_id(self.symbol_id)
                    self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–æ ID", True, "–°–∏–º–≤–æ–ª –ø–æ–ª—É—á–µ–Ω")
                except Exception as e:
                    self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–æ ID", False, str(e))
                
            else:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤", False, "–°–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤
            try:
                await self.connector.get_assets()
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤", True, "–ê–∫—Ç–∏–≤—ã –ø–æ–ª—É—á–µ–Ω—ã")
            except Exception as e:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤", False, str(e))
                
        except Exception as e:
            self.log_test_result("–†–∞–±–æ—Ç–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏", False, str(e))

    async def test_market_data(self):
        """–¢–µ—Å—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            if not self.symbol_id:
                self.log_test_result("–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", False, "–°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ—Ç–æ–≤—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            await self.connector.subscribe_spots([self.symbol_id])
            self.log_test_result("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏", True, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {self.symbol_name}")
            
            # –ñ–¥–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            await asyncio.sleep(3)
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–¥–±–∞—Ä—ã
            await self.connector.subscribe_live_trendbar(self.symbol_id, TrendbarPeriod.M1)
            self.log_test_result("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–¥–±–∞—Ä—ã", True, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ M1 —Ç—Ä–µ–Ω–¥–±–∞—Ä—ã")
            
            await asyncio.sleep(2)
            
            # –û—Ç–ø–∏—Å–∫–∞
            await self.connector.unsubscribe_spots([self.symbol_id])
            await self.connector.unsubscribe_live_trendbar(self.symbol_id, TrendbarPeriod.M1)
            self.log_test_result("–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –¥–∞–Ω–Ω—ã—Ö", True, "–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            self.log_test_result("–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", False, str(e))

    async def test_historical_data(self):
        """–¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            if not self.symbol_id:
                self.log_test_result("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", False, "–°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–±–∞—Ä–æ–≤
            to_timestamp = int(datetime.now().timestamp() * 1000)
            from_timestamp = int((datetime.now() - timedelta(hours=1)).timestamp() * 1000)
            
            trendbars = await self.connector.get_trendbars(
                self.symbol_id,
                TrendbarPeriod.M1,
                from_timestamp,
                to_timestamp,
                count=10
            )
            
            if trendbars:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–±–∞—Ä–æ–≤", True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(trendbars)} –±–∞—Ä–æ–≤")
            else:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–±–∞—Ä–æ–≤", False, "–¢—Ä–µ–Ω–¥–±–∞—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–æ–≤
            to_timestamp = int(datetime.now().timestamp() * 1000)
            from_timestamp = int((datetime.now() - timedelta(minutes=10)).timestamp() * 1000)
            
            ticks = await self.connector.get_tick_data(
                self.symbol_id,
                QuoteType.BID,
                from_timestamp,
                to_timestamp
            )
            
            if ticks:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–æ–≤", True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(ticks)} —Ç–∏–∫–æ–≤")
            else:
                self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–æ–≤", False, "–¢–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                
        except Exception as e:
            self.log_test_result("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", False, str(e))

    async def test_trading(self):
        """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        try:
            logger.info("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
            
            created_order_id = None
            created_position_id = None
            
            try:
                if not self.symbol_id:
                    logger.error("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
                    self.log_test_result("–¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", False, "–°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
                    return
                
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª: {self.symbol_name} (ID: {self.symbol_id}), –æ–±—ä–µ–º: {self.volume}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                try:
                    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")
                    order_response = await self.connector.buy_market(
                        self.symbol_id,
                        self.volume,
                        comment="Test order",
                        label="AsyncTest"
                    )
                    logger.info("‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω")
                    self.log_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞", True, "–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω")
                    
                    # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                    await asyncio.sleep(3)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö —á–µ—Ä–µ–∑ reconcile
                    logger.info("üîÑ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö...")
                    reconcile_response = await self.connector.reconcile()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    from ctrader_open_api_async.protobuf import Protobuf
                    extracted = Protobuf.extract(reconcile_response)
                    
                    # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    test_positions = []
                    if hasattr(extracted, 'position') and extracted.position:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        test_positions = [position for position in extracted.position
                                        if (hasattr(position, 'positionStatus') and position.positionStatus == 1 and
                                            hasattr(position, 'tradeData') and 
                                            hasattr(position.tradeData, 'symbolId') and
                                            position.tradeData.symbolId == self.symbol_id and
                                            hasattr(position.tradeData, 'label') and
                                            position.tradeData.label == "AsyncTest")]
                        
                        if test_positions:
                            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(test_positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                        else:
                            logger.info("üîç –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    if test_positions:
                        created_position_id = test_positions[0].positionId
                        position_volume = test_positions[0].tradeData.volume
                        self.log_test_result("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏", True, f"–ü–æ–∑–∏—Ü–∏—è {created_position_id} –Ω–∞–π–¥–µ–Ω–∞")
                        
                        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                        logger.info("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏...")
                        await asyncio.sleep(10)
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        try:
                            logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {created_position_id}...")
                            close_response = await self.connector.close_position(
                                created_position_id, 
                                position_volume
                            )
                            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {created_position_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
                            self.log_test_result("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏", True, f"–ü–æ–∑–∏—Ü–∏—è {created_position_id} –∑–∞–∫—Ä—ã—Ç–∞")
                            await asyncio.sleep(2)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {created_position_id}: {e}")
                            self.log_test_result("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏", False, str(e))
                    else:
                        logger.warning("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        self.log_test_result("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏", False, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
                    if "MARKET_CLOSED" in str(e) or "TRADING_DISABLED" in str(e):
                        self.log_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞", True, "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç (–æ–∂–∏–¥–∞–µ–º–æ)")
                    else:
                        self.log_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞", False, str(e))
                
                # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                try:
                    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")
                    limit_response = await self.connector.place_limit_order(
                        self.symbol_id,
                        TradeSide.SELL,
                        self.volume,
                        limit_price=999999.0,  # –ó–∞–≤–µ–¥–æ–º–æ –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
                        comment="Test limit order"
                    )
                    logger.info("‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
                    self.log_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞", True, "–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    try:
                        logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞...")
                        from ctrader_open_api_async.protobuf import Protobuf
                        extracted = Protobuf.extract(limit_response)
                        logger.info(f"üîç –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {extracted}")
                        
                        # –ò—â–µ–º ID –æ—Ä–¥–µ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                        if hasattr(extracted, 'order') and hasattr(extracted.order, 'orderId'):
                            created_order_id = extracted.order.orderId
                            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {created_order_id}")
                        elif hasattr(extracted, 'orderId'):
                            created_order_id = extracted.orderId
                            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {created_order_id}")
                        else:
                            logger.warning("‚ùå ID –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                            logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ: {dir(extracted)}")
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã order
                            if hasattr(extracted, 'order'):
                                logger.info(f"üîç –ê—Ç—Ä–∏–±—É—Ç—ã order: {dir(extracted.order)}")
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å orderId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                if hasattr(extracted.order, 'orderId'):
                                    created_order_id = str(extracted.order.orderId)
                                    logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω ID –æ—Ä–¥–µ—Ä–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞: {created_order_id}")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {e}")
                        import traceback
                        logger.error(f"Traceback: {traceback.format_exc()}")
                    
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID –∏–∑ –æ—Ç–≤–µ—Ç–∞, –∏—â–µ–º –≤ —Å–ø–∏—Å–∫–µ –æ—Ä–¥–µ—Ä–æ–≤
                    if not created_order_id:
                        logger.info("üîÑ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞, –∏—â–µ–º –≤ —Å–ø–∏—Å–∫–µ –æ—Ä–¥–µ—Ä–æ–≤...")
                        await asyncio.sleep(2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞
                        
                        orders_response = await self.connector.get_order_list()
                        self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤", True, "–°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω")
                        
                        try:
                            from ctrader_open_api_async.protobuf import Protobuf
                            extracted = Protobuf.extract(orders_response)
                            if hasattr(extracted, 'order') and extracted.order:
                                # –ò—â–µ–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                                active_test_orders = [order for order in extracted.order 
                                                    if (hasattr(order, 'orderStatus') and order.orderStatus == 1 and
                                                        hasattr(order, 'comment') and 
                                                        order.comment == "Test limit order")]
                                
                                if active_test_orders:
                                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                                    created_order_id = active_test_orders[0].orderId
                                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä: {created_order_id}")
                                else:
                                    logger.warning("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            else:
                                logger.warning("‚ùå –û—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ: {e}")
                    else:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        orders_response = await self.connector.get_order_list()
                        self.log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤", True, "–°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω")
                    
                    # –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
                    if created_order_id:
                        try:
                            logger.info(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä {created_order_id}...")
                            cancel_response = await self.connector.cancel_order(created_order_id)
                            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {created_order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
                            self.log_test_result("–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞", True, f"–û—Ä–¥–µ—Ä {created_order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                            await asyncio.sleep(1)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {created_order_id}: {e}")
                            self.log_test_result("–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞", False, str(e))
                    else:
                        logger.error("‚ùå ID –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω - –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
                        self.log_test_result("–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞", False, "ID –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
                    if "MARKET_CLOSED" in str(e) or "TRADING_DISABLED" in str(e):
                        self.log_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞", True, "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç (–æ–∂–∏–¥–∞–µ–º–æ)")
                    else:
                        self.log_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞", False, str(e))
                        
            except Exception as e:
                logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                self.log_test_result("–¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", False, str(e))
            finally:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                if created_position_id:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏–Ω–∞—á–µ self.volume
                        volume_to_close = position_volume if 'position_volume' in locals() else self.volume
                        await self.connector.close_position(created_position_id, volume_to_close)
                        logger.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {created_position_id}")
                    except:
                        pass
                        
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                if created_order_id:
                    try:
                        await self.connector.cancel_order(created_order_id)
                        logger.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {created_order_id}")
                    except:
                        pass
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ test_trading: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            self.log_test_result("–¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    async def test_info_requests(self):
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.info("‚ÑπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–π–¥–µ—Ä–µ
            try:
                trader_info = await self.connector.get_trader_info()
                self.log_test_result("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–π–¥–µ—Ä–µ", True, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            except Exception as e:
                self.log_test_result("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–π–¥–µ—Ä–µ", False, str(e))
            
            # –°–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
            try:
                reconcile_response = await self.connector.reconcile()
                self.log_test_result("–°–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π", True, "–°–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as e:
                self.log_test_result("–°–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π", False, str(e))
            
            # –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L
            try:
                pnl_response = await self.connector.get_position_unrealized_pnl()
                self.log_test_result("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L", True, "P&L –ø–æ–ª—É—á–µ–Ω–∞")
            except Exception as e:
                self.log_test_result("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L", False, str(e))
            
            # –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
            try:
                to_timestamp = int(datetime.now().timestamp() * 1000)
                from_timestamp = int((datetime.now() - timedelta(days=1)).timestamp() * 1000)
                
                deals_response = await self.connector.get_deal_list(
                    from_timestamp,
                    to_timestamp,
                    max_rows=10
                )
                self.log_test_result("–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫", True, "–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω")
            except Exception as e:
                self.log_test_result("–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫", False, str(e))
                
        except Exception as e:
            self.log_test_result("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", False, str(e))

    async def test_event_handlers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π."""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            spot_events = 0
            execution_events = 0
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–æ—Ç–æ–≤—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
            def spot_handler(message):
                nonlocal spot_events
                spot_events += 1
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–ø–æ—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ #{spot_events}")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            def execution_handler(message):
                nonlocal execution_events
                execution_events += 1
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ #{execution_events}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            from ctrader_open_api_async.messages.OpenApiMessages_pb2 import ProtoOASpotEvent, ProtoOAExecutionEvent
            
            self.connector.add_message_handler(ProtoOASpotEvent().payloadType, spot_handler)
            self.connector.add_message_handler(ProtoOAExecutionEvent().payloadType, execution_handler)
            
            self.log_test_result("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", True, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if self.symbol_id:
                try:
                    await self.connector.subscribe_spots([self.symbol_id])
                    await asyncio.sleep(5)  # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è
                    await self.connector.unsubscribe_spots([self.symbol_id])
                    
                    if spot_events > 0:
                        self.log_test_result("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫", True, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {spot_events} —Å–æ–±—ã—Ç–∏–π")
                    else:
                        self.log_test_result("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫", True, "–°–æ–±—ã—Ç–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç)")
                except Exception as e:
                    self.log_test_result("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫", False, str(e))
            else:
                self.log_test_result("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫", False, "–°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.connector.remove_message_handler(ProtoOASpotEvent().payloadType)
            self.connector.remove_message_handler(ProtoOAExecutionEvent().payloadType)
            
            self.log_test_result("–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", True, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            self.log_test_result("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π", False, str(e))

    def start_redirect_server(self):
        """–ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞."""
        def auth_callback(auth_code: str):
            self.auth_code = auth_code

        server_address = ('localhost', 8080)
        self.server = HTTPServer(server_address, lambda *args, **kwargs: RedirectHandler(auth_callback, *args, **kwargs))
        server_thread = threading.Thread(target=self.server.serve_forever)
        server_thread.daemon = True
        server_thread.start()
        logger.info("HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")

    async def wait_for_auth(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        while not self.auth_code:
            await asyncio.sleep(1)

    def print_final_report(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
        total_tests = self.tests_passed + self.tests_failed
        success_rate = (self.tests_passed / total_tests * 100) if total_tests > 0 else 0
        
        logger.info("=" * 60)
        logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_failed}")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        logger.info("=" * 60)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report = {
            "timestamp": datetime.now().isoformat(),
            "total_tests": total_tests,
            "passed": self.tests_passed,
            "failed": self.tests_failed,
            "success_rate": success_rate,
            "results": self.test_results
        }
        
        with open("test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        logger.info("üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.json")

    async def test_cleanup(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π."""
        logger.info("üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π...")
        
        try:
            canceled_orders = 0
            closed_positions = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            try:
                orders_response = await self.connector.get_order_list()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                from ctrader_open_api_async.protobuf import Protobuf
                extracted = Protobuf.extract(orders_response)
                
                if hasattr(extracted, 'order') and extracted.order:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å 1 = ORDER_STATUS_ACCEPTED)
                    active_orders = [order for order in extracted.order 
                                   if hasattr(order, 'orderStatus') and order.orderStatus == 1]
                    
                    if active_orders:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                        
                        for order in active_orders:
                            # –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
                            should_cancel = False
                            
                            if hasattr(order, 'comment') and order.comment == "Test limit order":
                                should_cancel = True
                            elif (hasattr(order, 'limitPrice') and 
                                  order.limitPrice >= 999999.0):
                                should_cancel = True
                            
                            if should_cancel:
                                try:
                                    await self.connector.cancel_order(order.orderId)
                                    canceled_orders += 1
                                    logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä {order.orderId}")
                                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–º–µ–Ω–∞–º–∏
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä {order.orderId}: {e}")
                    else:
                        logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ reconcile
            try:
                reconcile_response = await self.connector.reconcile()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                from ctrader_open_api_async.protobuf import Protobuf
                extracted = Protobuf.extract(reconcile_response)
                
                if hasattr(extracted, 'position') and extracted.position:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å 1 = POSITION_STATUS_OPEN)
                    open_positions = [position for position in extracted.position 
                                    if hasattr(position, 'positionStatus') and position.positionStatus == 1]
                    
                    if open_positions:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(open_positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                        
                        for position in open_positions:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                            should_close = False
                            
                            if (hasattr(position, 'tradeData') and 
                                hasattr(position.tradeData, 'label') and
                                position.tradeData.label == "AsyncTest"):
                                should_close = True
                            elif (hasattr(position, 'tradeData') and 
                                  hasattr(position.tradeData, 'comment') and
                                  position.tradeData.comment == "Test order"):
                                should_close = True
                            
                            if should_close:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏
                                    volume = position.tradeData.volume if hasattr(position.tradeData, 'volume') else self.volume
                                    await self.connector.close_position(position.positionId, volume)
                                    closed_positions += 1
                                    logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è {position.positionId}")
                                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {position.positionId}: {e}")
                    else:
                        logger.info("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    logger.info("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if canceled_orders > 0 or closed_positions > 0:
                message = f"–û—Ç–º–µ–Ω–µ–Ω–æ {canceled_orders} –æ—Ä–¥–µ—Ä–æ–≤, –∑–∞–∫—Ä—ã—Ç–æ {closed_positions} –ø–æ–∑–∏—Ü–∏–π"
                self.log_test_result("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π", True, message)
            else:
                self.log_test_result("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π", True, "–¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            self.log_test_result("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π", False, str(e))

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = FullAsyncTester("credentials.json")
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 